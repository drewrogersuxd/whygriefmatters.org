---
import type { FeaturedContent, ResourcePageLink } from "@model/featuredContent";

import { getImageUrl } from "@common/client";

import RichTextContentBlock from "./richTextContentBlock.astro";
import LowerEmTitle from "./primitives/LowerEmTitle.astro";
import FeaturedResources from "./FeaturedResources.astro";
import MobileCarousel from "./MobileCarousel/MobileCarousel.astro";
import MobileCarouselItem from "./MobileCarousel/MobileCarouselItem.astro";
import MobileCarouselControl from "./MobileCarousel/MobileCarouselControl.astro";
import LowerEmLink from "./primitives/LowerEmLink.astro";
import ResourceLink from "./ResourceLink.astro";

interface Props {
  featuredContent: FeaturedContent;
  indexInCollection?: number;
}

function getAdjustedIndex(arrLength: number, index: number) {
  let adjustedIndex = index % arrLength;

  if (adjustedIndex < 0) {
    adjustedIndex += arrLength;
  }

  return adjustedIndex;
}

function getRoute(pageLink: ResourcePageLink): string {
  const slugParts = [pageLink.type, pageLink.category, pageLink.population]
    .filter((part) => Boolean(part))
    .join("/");

  return `/${slugParts}`;
}

const { featuredContent, indexInCollection = 0 } = Astro.props;

const bgClasses = ["bg-stone-50", "bg-stone-100"];

const adjustedIndex = getAdjustedIndex(bgClasses.length, indexInCollection);

const bgClass = bgClasses[adjustedIndex];

const featurePanelId = crypto.randomUUID();
---

<section class:list={["pt-3", bgClass]}>
  <div class="mx-auto">
    <LowerEmTitle
      as="h2"
      title={featuredContent.title}
      class:list={[
        "py-4 px-3",
        "text-3xl text-center font-serif lowercase font-light",
      ]}
    />
    {
      featuredContent.description && (
        <RichTextContentBlock
          class:list={["font-serif text-center prose", "px-3 mx-auto mb-6"]}
          portableText={featuredContent.description}
        />
      )
    }
    {
      featuredContent.content.map((content, panelIdx) => {
        switch (content.contentType) {
          case "richTextContentBlock":
            return (
              <div class="max-w-prose px-3 my-6 m-auto prose font-serif text-center text-sky-800">
                <RichTextContentBlock portableText={content.portableText} />
              </div>
            );

          case "rowOfThreeFeaturedResources":
            return (
              <div class="mb-3">
                <FeaturedResources featuredResources={content.resources} />
              </div>
            );

          case "rowOfThree":
            return (
              <div>
                <MobileCarousel>
                  <Fragment slot="items">
                    {content.images.map((image, imgIdx) => (
                      <MobileCarouselItem
                        id={`${featurePanelId}-${panelIdx}-${imgIdx}`}
                      >
                        <img
                          src={getImageUrl(image.image)
                            .width(640)
                            .height(450)
                            .url()}
                          alt={image.altText}
                        />
                      </MobileCarouselItem>
                    ))}
                  </Fragment>
                  <Fragment slot="controls">
                    {Array.from({ length: 3 }, (_, i) => (
                      <MobileCarouselControl
                        id={`${featurePanelId}-${panelIdx}-${i}`}
                      >
                        {i + 1}
                      </MobileCarouselControl>
                    ))}
                  </Fragment>
                </MobileCarousel>
              </div>
            );

          case "resourceLinks":
            return (
              <div class:list={["flex flex-wrap justify-center gap-4", "p-3"]}>
                {content.resources.map((link) => (
                  <ResourceLink
                    to={link.url}
                    label={link.title}
                    resourceType={link.type ?? undefined}
                    external
                  />
                ))}
              </div>
            );

          case "resourcePageLinks":
            return (
              <div
                class:list={["flex", "flex-wrap", "justify-center", "gap-4"]}
              >
                {content.links.map((pageLink) => (
                  <ResourceLink
                    to={getRoute(pageLink)}
                    label={pageLink.label}
                    resourceType={pageLink.type ?? undefined}
                  />
                ))}
              </div>
            );
        }
      })
    }
    {
      featuredContent.featuredContentFooterLink && (
        <div class="mx-auto py-6 text-center">
          <LowerEmLink
            to={getRoute(featuredContent.featuredContentFooterLink)}
            label={featuredContent.featuredContentFooterLink.label}
          />
        </div>
      )
    }
  </div>
</section>
