---
import type { FeaturedContent } from "@model/featuredContent";

import { getImageUrl } from "@common/client";
import { getRoute } from "@common/route";

import RichTextContentBlock from "./richTextContentBlock.astro";
import FeaturedResources from "./FeaturedResources.astro";
import MobileCarousel from "./MobileCarousel/MobileCarousel.astro";
import MobileCarouselItem from "./MobileCarousel/MobileCarouselItem.astro";
import MobileCarouselControl from "./MobileCarousel/MobileCarouselControl.astro";
import TopicCollectionContentBlock from "./TopicCollectionContentBlock.astro";
import Heading from "./primitives/Heading.astro";
import EmphasizedEllipsisText from "./primitives/EmphasizedEllipsisText.astro";
import Link from "./primitives/Link.astro";
import CardLink from "./CardLink.astro";

interface Props {
  featuredContent: FeaturedContent;
  indexInCollection?: number;
}

function getAdjustedIndex(arrLength: number, index: number) {
  let adjustedIndex = index % arrLength;

  if (adjustedIndex < 0) {
    adjustedIndex += arrLength;
  }

  return adjustedIndex;
}

const { featuredContent, indexInCollection = 0 } = Astro.props;

const bgClasses = ["bg-stone-50", "bg-stone-100"];

const adjustedIndex = getAdjustedIndex(bgClasses.length, indexInCollection);

const bgClass = bgClasses[adjustedIndex];

const featurePanelId = crypto.randomUUID();
---

<section class:list={["py-3", bgClass]}>
  <div class:list={["container mx-auto"]}>
    <div class="mx-auto py-4 text-center">
      <Heading as="h2" size="xl3">
        <EmphasizedEllipsisText text={featuredContent.title} />
      </Heading>
    </div>
    {
      featuredContent.description && (
        <RichTextContentBlock
          class:list={["font-serif text-center prose", "px-3 mx-auto mb-6"]}
          portableText={featuredContent.description}
        />
      )
    }
    {
      featuredContent.content.map((content, panelIdx) => {
        switch (content.contentType) {
          case "richTextContentBlock":
            return (
              <div class="max-w-prose px-3 my-6 m-auto prose font-serif text-center text-sky-800">
                <RichTextContentBlock portableText={content.portableText} />
              </div>
            );

          case "rowOfThreeFeaturedResources":
            return (
              <div class="mb-3">
                <FeaturedResources featuredResources={content.resources} />
              </div>
            );

          case "rowOfThree":
            return (
              <div>
                <MobileCarousel>
                  <Fragment slot="items">
                    {content.images.map((image, imgIdx) => (
                      <MobileCarouselItem
                        id={`${featurePanelId}-${panelIdx}-${imgIdx}`}
                      >
                        <img
                          src={getImageUrl(image.image)
                            .width(640)
                            .height(450)
                            .url()}
                          alt={image.altText}
                        />
                      </MobileCarouselItem>
                    ))}
                  </Fragment>
                  <Fragment slot="controls">
                    {Array.from({ length: 3 }, (_, i) => (
                      <MobileCarouselControl
                        id={`${featurePanelId}-${panelIdx}-${i}`}
                      >
                        {i + 1}
                      </MobileCarouselControl>
                    ))}
                  </Fragment>
                </MobileCarousel>
              </div>
            );

          case "resourceLinks":
            return (
              <>
                <div
                  class:list={["flex flex-wrap justify-center gap-4", "p-3"]}
                >
                  {content.resources.map((link) => (
                    <CardLink
                      href={link.url}
                      label={link.title}
                      cardProps={{ resourceType: link.type ?? undefined }}
                      external
                    />
                  ))}
                </div>
              </>
            );

          case "resourcePageLinks":
            return (
              <div
                class:list={["flex", "flex-wrap", "justify-center", "gap-4"]}
              >
                {content.links.map((pageLink) => (
                  <CardLink
                    href={getRoute(pageLink)}
                    label={pageLink.label}
                    cardProps={{
                      resourceType: pageLink.type ?? undefined,
                    }}
                  />
                ))}
              </div>
            );

          case "topicCollectionContentBlock":
            return (
              <TopicCollectionContentBlock
                showCollectionDescription={content.showDescription}
                showTopicDescriptions={content.showDescriptions}
                showTopicImages={content.showImages}
                collection={content.topicCollection}
              />
            );
        }
      })
    }
    {
      featuredContent.featuredContentFooterLink && (
        <div class="mx-auto py-6 text-center">
          <Link
            href={getRoute(featuredContent.featuredContentFooterLink)}
            size="xl2"
          >
            <EmphasizedEllipsisText
              text={featuredContent.featuredContentFooterLink.label}
            />
          </Link>
        </div>
      )
    }
  </div>
</section>
