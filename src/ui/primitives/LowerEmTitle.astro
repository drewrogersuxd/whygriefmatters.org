---
import type { Polymorphic } from "astro/types";
import type {
  TypographyColorScheme,
  TypographyColorSchemeVariant,
  TypographySize,
} from "@common/design-system";

import words from "lodash/words";

import Heading from "./Heading.astro";

type HeadingHTMLTags = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";

type OwnProps = {
  title: string;
  colorScheme?: TypographyColorScheme;
  colorSchemeVariant?: TypographyColorSchemeVariant;
  size?: TypographySize;
  hoverable?: boolean;
};

type Props<Tag extends HeadingHTMLTags> = Polymorphic<{ as: Tag }> & OwnProps;

const { as: Tag = "h1", ...props }: Props<HeadingHTMLTags> = Astro.props;
---

<Heading
  as={Tag}
  size={props.size}
  hoverable={props.hoverable}
  colorScheme={props.colorScheme}
  colorSchemeVariant={props.colorSchemeVariant}
  class="lowercase"
>
  {
    words(props.title).map((titlePart, i, arr) => {
      switch (true) {
        case i + 1 === arr.length:
          return (
            <span class="font-semibold after:content-['...'] after:whitespace-nowrap after:-ml-1.5 after:font-light">
              {titlePart}
            </span>
          );
        case i > 0:
          return <span class="font-semibold">{` ${titlePart}`}</span>;
        default:
          return titlePart;
      }
    })
  }
</Heading>
