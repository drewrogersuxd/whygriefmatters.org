---
import { buildCategoryTree, type CategoryTreeItem } from "@common/category";
import { getCategories, getFeaturedTopics } from "@common/client";

import RecursiveCategoryTree from "@ui/MainNav/RecursiveCategoryTree.astro";

import MainNavLink from "./MainNavLink.astro";

const featuredTopics = await getFeaturedTopics();

const categories = await getCategories();
const masterCategoryTree: CategoryTreeItem[] = buildCategoryTree(categories);

const typesOfLoss = masterCategoryTree.find(
  (rootCategory) => rootCategory.slug === "types-of-loss",
);

const supportingTheBereaved = masterCategoryTree.find(
  (rootCategory) => rootCategory.slug === "supporting-the-bereaved",
);

const navMenuContainerClasses =
  "nav-menu-container hidden absolute left-0 w-full bg-slate-100 text-gray-900";

const navMenuButtonClasses = "nav-menu-button px-5 py-3 font-medium";
---

<main-nav>
  <nav
    class="z-50 relative w-screen flex justify-center items-center bg-blue-900 text-slate-50"
  >
    <div>
      <button class={navMenuButtonClasses} type="button">
        Featured Topics
      </button>
      <div class={navMenuContainerClasses}>
        <ul>
          {
            featuredTopics.map((topic) => (
              <li>
                <MainNavLink hierarchyLevel={"primary"} href={`/${topic.slug}`}>
                  {topic.title}
                </MainNavLink>
              </li>
            ))
          }
        </ul>
      </div>
    </div>

    <div>
      <button class={navMenuButtonClasses} type="button">Types of Loss</button>
      <div class={navMenuContainerClasses}>
        <div class="grid grid-cols-3">
          {
            typesOfLoss?.children.map((c) => (
              <RecursiveCategoryTree categories={[c]} />
            ))
          }
        </div>
      </div>
    </div>

    <div>
      <button class={navMenuButtonClasses} type="button"
        >Supporting the Bereaved</button
      >
      <div class={navMenuContainerClasses}>
        <div class="grid grid-cols-2">
          {
            supportingTheBereaved?.children
              .filter((c) => c.children.length > 0)
              .map((c, i) => (
                <div class="mb-3">
                  <RecursiveCategoryTree categories={[c]} />
                  {i + 1 === c.children.length ? (
                    <ul class="border-t-2 mt-3 pt-3">
                      <h3 class="text-xl font-serif font-semibold">
                        Specific Support Topics
                      </h3>
                      <p class="pb-2 italic font-serif text-grey-800">
                        A selection of more focussed topics offering help with
                        supporting specific groups
                      </p>
                      {supportingTheBereaved?.children
                        .filter((c) => c.children.length === 0)
                        .map((c) => (
                          <li>
                            <a href={`/${c.slug}`} class="hover:underline">
                              {c.title}
                            </a>
                          </li>
                        ))}
                    </ul>
                  ) : null}
                </div>
              ))
          }
        </div>
      </div>
    </div>

    <div>
      <a class={navMenuButtonClasses} href="/about">About Us</a>
    </div>

    <div>
      <a class={navMenuButtonClasses} href="/contribute">Contribute</a>
    </div>
  </nav>
</main-nav>

<script>
  class MainNav extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const buttons = this.querySelectorAll(".nav-menu-button");
      const allMenuContainers = this.querySelectorAll(".nav-menu-container");

      buttons.forEach((button) =>
        button.addEventListener("click", (event) => {
          const buttonParent = button.parentElement;

          allMenuContainers.forEach((menuContainer) => {
            if (menuContainer.parentElement === buttonParent) {
              menuContainer.classList.toggle("hidden");
              menuContainer.classList.toggle("flex");
            } else {
              menuContainer.classList.remove("flex");
              menuContainer.classList.add("hidden");
            }
          });

          event.stopPropagation();
        }),
      );

      document.addEventListener("click", (event: Event) => {
        const isClickInsideMainNav = this.contains(event.target as Node);

        if (!isClickInsideMainNav) {
          allMenuContainers.forEach((menuContainer) => {
            menuContainer.classList.remove("flex");
            menuContainer.classList.add("hidden");
          });
        }
      });
    }
  }

  customElements.define("main-nav", MainNav);
</script>
