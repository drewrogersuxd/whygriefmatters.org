<collapsible-content-new>
  <slot name="button" />
  <slot name="content" />
</collapsible-content-new>

<script>
  class CollapsibleContentNew extends HTMLElement {
    isOpen: boolean;
    button: Element | null;
    content: Element | null;

    closeButton: Element | null;

    chevron: Element | null;

    constructor() {
      super();
      this.isOpen = false;
      this.button = null;
      this.content = null;
      this.closeButton = null;
      this.chevron = null;

      // Ensure the handleCloseFromDocumentClick has the correct 'this'
      this.handleCloseFromDocumentClick =
        this.handleCloseFromDocumentClick.bind(this);
    }

    connectedCallback() {
      this.button = this.querySelector(".collapsible-content-button");
      this.content = this.querySelector(".collapsible-content-content");
      this.closeButton = this.querySelector(
        ".collapsible-content-close-button"
      );

      this.chevron = this.querySelector(".chevron");

      if (this.button) {
        this.button.addEventListener("click", () => this.toggleOpen());
      }

      if (this.closeButton) {
        this.closeButton.addEventListener("click", () => this.toggleOpen());
      }

      document.addEventListener("click", this.handleCloseFromDocumentClick);
    }

    disconnectedCallback() {
      document.removeEventListener("click", this.handleCloseFromDocumentClick);
    }

    // This is ok for now as we're only using collapsible in the main nav
    // but transition classes should be dealt with via data-set if we need different transitions elsewhere
    toggleOpen = () => {
      this.isOpen = !this.isOpen;

      if (this.content) {
        if (this.isOpen) {
          this.content.classList.remove("hidden");
          requestAnimationFrame(() => {
            this.content?.classList.remove("opacity-0");
            this.content?.classList.add("opacity-100");
          });

          this.chevron?.classList.add("rotate-180");
        } else {
          this.content.classList.remove("opacity-100");
          this.content.classList.add("opacity-0");

          this.chevron?.classList.remove("rotate-180");

          setTimeout(() => this.content?.classList.add("hidden"), 300);
        }
      }
    };

    handleCloseFromDocumentClick = (e: Event) => {
      if (!this.contains(e.target as Element)) {
        if (this.isOpen) {
          this.toggleOpen();
        }
      }
    };
  }

  customElements.define("collapsible-content-new", CollapsibleContentNew);
</script>
