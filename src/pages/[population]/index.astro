---
import pluralize from "pluralize";
import startCase from "lodash/startCase";
import uniqBy from "lodash/uniqBy";

import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { Category } from "@model/category";

import { getPopulationPagesData } from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";

import AsideNav from "@ui/AsideNav/AsideNav.astro";
import AsideNavContainer from "@ui/AsideNav/AsideNavContainer.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import { getFilteredTypesFromResources } from "@common/resourceType";

interface Props {
  populationName: string;
  resources: Array<InternetResourcePageListing>;
  applicableTypes: Array<InternetResourceType>;
  applicableCategories: Array<Category>;
}

export async function getStaticPaths() {
  const populationPagesData = await getPopulationPagesData();

  return populationPagesData.flatMap((pageData) => {
    const applicableCategories =
      uniqBy(
        pageData.resources?.flatMap((r) => r.categories),
        "slug"
      ).filter((x) => x !== null) ?? [];

    const applicableTypes = getFilteredTypesFromResources(
      pageData.resources ?? []
    );

    return {
      params: { population: pageData.slug },
      props: {
        populationName: pageData.name,
        resources: pageData.resources ?? [],
        applicableCategories,
        applicableTypes,
      },
    };
  });
}

const params = Astro.params;
const props = Astro.props;
---

<MainLayout>
  <ResourcePageLayout>
    <ResourcePageListingsContainer slot="section">
      {
        props.resources.map((resource) => (
          <ResourcePageListingsListItem>
            <ResourcePageListing resource={resource} />
          </ResourcePageListingsListItem>
        ))
      }
    </ResourcePageListingsContainer>
    <AsideNavContainer
      slot="aside"
      title="Narrow Your Search"
      subtitle={`View resources for ${props.populationName}`}
      colorVariant="secondary"
    >
      {
        props.applicableCategories?.length > 0 && (
          <AsideNav
            title="By category..."
            links={props.applicableCategories.map((category) => ({
              to: `/${category.slug}/${params.population}`,
              label: category.title,
            }))}
            colorVariant={"secondary"}
          />
        )
      }
      {
        props.applicableTypes?.length > 1 && (
          <AsideNav
            title="By type..."
            links={props.applicableTypes.map((type) => ({
              to: `/${type}/${params.population}`,
              label: startCase(pluralize(type)),
            }))}
            colorVariant={"secondary"}
          />
        )
      }
    </AsideNavContainer>
  </ResourcePageLayout>
</MainLayout>
