---
import startCase from "lodash/startCase";
import pluralize from "pluralize";

import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { CategoryPageData } from "@model/categoryPage";
import type { Population } from "@model/population";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing.astro";

interface Props {
  title: string;
  resources: Array<InternetResourcePageListing>;
  populationData: Population;
  applicableTypes: Array<InternetResourceType>;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.flatMap((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    return filteredPopulations
      .map((population) => {
        const resources = data.resources.filter((r) =>
          r.populations?.includes(population.slug)
        );

        const filteredTypes = getFilteredTypesFromResources(data.resources);

        return {
          params: { category: data.slug, population: population.slug },
          props: {
            categoryTitle: data.title,
            populationData: population,
            resources,
            applicableTypes: filteredTypes ?? [],
          },
        };
      })
      .filter((pop) => pop.props.resources.length > 0);
  });
}

const params = Astro.params;
const props = Astro.props;
---

<MainLayout>
  <section>
    <ul>
      {
        props.resources.map((resource) => (
          <li class:list={["mb-6"]}>
            <ResourcePageListing resource={resource} />
          </li>
        ))
      }
    </ul>
    <aside>
      {
        props.applicableTypes?.length > 1 && (
          <nav>
            <h2>Type</h2>
            <ul>
              {props.applicableTypes.map((type) => (
                <li>
                  <a href={`/${type}/${params.category}/${params.population}`}>
                    {pluralize(startCase(type))}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        )
      }
    </aside>
  </section>
</MainLayout>
