---
import startCase from "lodash/startCase";
import pluralize from "pluralize";

import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { CategoryPageData } from "@model/categoryPage";
import type { Population } from "@model/population";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";

import AsideNav from "@ui/AsideNav/AsideNav.astro";
import AsideNavContainer from "@ui/AsideNav/AsideNavContainer.astro";
import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import { getFullCategoryName } from "@common/category";

interface Props {
  categoryTitle: string;
  resources: Array<InternetResourcePageListing>;
  populationData: Population;
  applicableTypes: Array<InternetResourceType>;
  parentSlug: string;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.flatMap((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    return filteredPopulations
      .map((population) => {
        const resources = data.resources.filter((r) =>
          r.populations?.includes(population.slug)
        );

        const filteredTypes = getFilteredTypesFromResources(resources);

        return {
          params: { category: data.slug, population: population.slug },
          props: {
            categoryTitle: data.title,
            parentSlug: data.parent?.slug ?? "",
            populationData: population,
            resources,
            applicableTypes: filteredTypes ?? [],
          },
        };
      })
      .filter((pop) => pop.props.resources.length > 0);
  });
}

const params = Astro.params;
const props = Astro.props;

const fullCategoryTitle = getFullCategoryName(
  props.parentSlug,
  props.categoryTitle
);
---

<MainLayout>
  <ResourcePageLayout>
    <ResourcePageListingsContainer slot="section">
      {
        props.resources.map((resource) => (
          <ResourcePageListingsListItem>
            <ResourcePageListing resource={resource} />
          </ResourcePageListingsListItem>
        ))
      }
    </ResourcePageListingsContainer>
    <Fragment slot="aside">
      {
        props.applicableTypes?.length > 1 && (
          <AsideNavContainer
            title="Narrow Your Search"
            subtitle={`See resources in ${fullCategoryTitle} for ${props.populationData.name} by type...`}
            colorVariant="secondary"
          >
            <AsideNav
              links={props.applicableTypes.map((type) => ({
                to: `/${type}/${params.category}/${params.population}`,
                label: pluralize(startCase(type)),
              }))}
              colorVariant={"secondary"}
            />
          </AsideNavContainer>
        )
      }
      <AsideNavContainer
        title="See More Resources"
        subtitle="Can't find what you're looking for?"
      >
        <AsideNav
          links={[
            {
              to: `/${params.category}`,
              label: `See all resources in ${fullCategoryTitle}`,
            },
          ]}
        />
      </AsideNavContainer>
    </Fragment>
  </ResourcePageLayout>
</MainLayout>
