---
import startCase from "lodash/startCase";
import pluralize from "pluralize";

import type {
  CategoryPageData,
  CategoryPageFeaturedResource,
} from "@model/categoryPage";
import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";
import type { Population } from "@model/population";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";

import MainLayout from "@layouts/MainLayout.astro";

import AsideNav from "@ui/AsideNav/AsideNav.astro";
import AsideNavContainer from "@ui/AsideNav/AsideNavContainer.astro";
import FeaturedResources from "@ui/FeaturedResources.astro";
import LowerEmTitle from "@ui/primitives/LowerEmTitle.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";

interface Props {
  title: string;
  resources: Array<InternetResourcePageListing>;
  featuredArticles: Array<CategoryPageFeaturedResource> | null;
  featuredStories: Array<CategoryPageFeaturedResource> | null;
  applicablePopulations: Array<Population>;
  applicableTypes: Array<InternetResourceType>;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.map((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug))
    );

    const filteredTypes = getFilteredTypesFromResources(data.resources);

    return {
      params: { category: data.slug },
      props: {
        title: data.title,
        resources: data.resources,
        featuredArticles: data.featuredArticles,
        featuredStories: data.featuredStories,
        applicablePopulations: filteredPopulations ?? [],
        applicableTypes: filteredTypes ?? [],
      },
    };
  });
}

const params = Astro.params;
const props = Astro.props;

const showApplicablePopulations = props.applicablePopulations?.length > 0;
const showApplicableTypes = props.applicableTypes?.length > 1;
const showNarrowSearchAside = showApplicablePopulations || showApplicableTypes;
---

<MainLayout>
  <ResourcePageLayout>
    <Fragment slot="featured">
      {
        props.featuredStories && (
          <div class="pb-3">
            <LowerEmTitle
              as="h2"
              title={"Featured Stories"}
              sizeVariant="text-2xl"
              class="text-center py-3"
            />
            <FeaturedResources featuredResources={props.featuredStories} />
          </div>
        )
      }
      {
        props.featuredArticles && (
          <div>
            <LowerEmTitle
              as="h2"
              title={"Featured Articles"}
              sizeVariant="text-2xl"
              class="text-center py-3"
            />
            <FeaturedResources featuredResources={props.featuredArticles} />
          </div>
        )
      }
    </Fragment>
    <ResourcePageListingsContainer slot="section">
      {
        props.resources.map((resource) => (
          <ResourcePageListingsListItem>
            <ResourcePageListing resource={resource} />
          </ResourcePageListingsListItem>
        ))
      }
    </ResourcePageListingsContainer>
    {
      showNarrowSearchAside && (
        <AsideNavContainer
          slot="aside"
          title="Narrow Your Search"
          subtitle="View resources in this category tailored to you"
          colorVariant="secondary"
        >
          {props.applicablePopulations?.length > 0 && (
            <AsideNav
              title="Resources for..."
              links={props.applicablePopulations.map((population) => ({
                to: `/${params.category}/${population.slug}`,
                label: population.name,
              }))}
              colorVariant={"secondary"}
            />
          )}
          {props.applicableTypes?.length > 1 && (
            <AsideNav
              title="By type..."
              links={props.applicableTypes.map((type) => ({
                to: `/${type}/${params.category}`,
                label: pluralize(startCase(type)),
              }))}
              colorVariant={"secondary"}
            />
          )}
        </AsideNavContainer>
      )
    }
  </ResourcePageLayout>
</MainLayout>
