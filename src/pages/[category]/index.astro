---
import startCase from "lodash/startCase";
import pluralize from "pluralize";

import type {
  CategoryPageData,
  CategoryPageFeaturedResource,
} from "@model/categoryPage";
import type { Population } from "@model/population";
import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";

import { getCategoryPagesData, getPopulations } from "@common/client";
import { getFilteredTypesFromResources } from "@common/resourceType";

import MainLayout from "@layouts/MainLayout.astro";

interface Props {
  title: string;
  resources: Array<InternetResourcePageListing>;
  featuredArticles: Array<CategoryPageFeaturedResource> | null;
  featuredStories: Array<CategoryPageFeaturedResource> | null;
  applicablePopulations: Array<Population>;
  applicableTypes: Array<InternetResourceType>;
}

export async function getStaticPaths() {
  const categoryPagesData = await getCategoryPagesData();
  const populations = await getPopulations();

  return categoryPagesData.map((data: CategoryPageData) => {
    const filteredPopulations = populations.filter((p) =>
      data.resources.some((r) => r.populations?.includes(p.slug)),
    );

    const filteredTypes = getFilteredTypesFromResources(data.resources);

    return {
      params: { category: data.slug },
      props: {
        title: data.title,
        resources: data.resources,
        featuredArticles: data.featuredArticles,
        featuredStories: data.featuredStories,
        applicablePopulations: filteredPopulations ?? [],
        applicableTypes: filteredTypes ?? [],
      },
    };
  });
}

const params = Astro.params;
const props = Astro.props;
---

<MainLayout>
  <div>
    <div>
      {
        props.featuredArticles && (
          <section>
            <h2>{"Featured Articles"}</h2>
            {props.featuredArticles.map((article) => (
              <article>
                <h3>{article.title}</h3>
                <p>{article.description}</p>
              </article>
            ))}
          </section>
        )
      }
      {
        props.featuredStories && (
          <section>
            <h2>{"Featured Stories"}</h2>
            {props.featuredStories.map((article) => (
              <article>
                <h3>{article.title}</h3>
                <p>{article.description}</p>
              </article>
            ))}
          </section>
        )
      }
      <section>
        <ul>
          {
            props.resources.map((resource) => (
              <li>
                <article>
                  <h3>{resource.title}</h3>
                  <time datetime={resource.lastUpdated}>
                    Last updated: [[todo]]
                  </time>
                  <p>{resource.description}</p>
                  <a href={resource.resourceUrl} rel="noopener" target="_blank">
                    Go to resource
                  </a>
                </article>
              </li>
            ))
          }
        </ul>
      </section>
    </div>
    <aside>
      {
        props.applicablePopulations?.length > 0 && (
          <nav>
            <h2>Population</h2>
            <ul>
              {props.applicablePopulations.map((population) => (
                <li>
                  <a href={`/${params.category}/${population.slug}`}>
                    {population.name}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        )
      }
      {
        props.applicableTypes?.length > 1 && (
          <nav>
            <h2>Type</h2>
            <ul>
              {props.applicableTypes.map((type) => (
                <li>
                  <a href={`/${type}/${params.category}`}>
                    {pluralize(startCase(type))}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        )
      }
    </aside>
  </div>
</MainLayout>
