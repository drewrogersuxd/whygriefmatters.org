---
import type { InternetResourcePageListing } from "@model/internetResource";
import type { Category } from "@model/category";
import type { Population } from "@model/population";

import {
  getCategoriesByFilter,
  getPopulations,
  getResourceTypePagesData,
} from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import AsideNavContainer from "@ui/AsideNav/AsideNavContainer.astro";
import AsideNav from "@ui/AsideNav/AsideNav.astro";
import pluralize from "pluralize";
import startCase from "lodash/startCase";

interface Props {
  resources: Array<InternetResourcePageListing>;
  applicablePopulations: Array<Population>;
  applicableCategories: Array<Category>;
}

export async function getStaticPaths() {
  const resourceTypePagesData = await getResourceTypePagesData();
  const populations = await getPopulations();

  const pathPromises = Object.entries(resourceTypePagesData).map(
    async ([resourceType, resources]: [
      string,
      Array<InternetResourcePageListing>,
    ]) => {
      const filteredPopulations = populations.filter((p) =>
        resources.some((r) => r.populations?.includes(p.slug))
      );

      // This is less than ideal as means an additional request for each type
      const slugsWithTitles = await getCategoriesByFilter({ resourceType });

      return {
        params: { resourceType },
        props: {
          resources,
          applicablePopulations: filteredPopulations ?? [],
          applicableCategories: slugsWithTitles ?? [],
        },
      };
    }
  );

  const paths = await Promise.all(pathPromises);

  return paths.filter((x) => x.props.resources.length > 0);
}

const params = Astro.params;
const props = Astro.props;

const resourceTypeLabel = `${startCase(pluralize(params.resourceType))}`;
---

<MainLayout>
  <ResourcePageLayout>
    <ResourcePageListingsContainer slot="section">
      {
        props.resources.map((resource) => (
          <ResourcePageListingsListItem>
            <ResourcePageListing resource={resource} />
          </ResourcePageListingsListItem>
        ))
      }
    </ResourcePageListingsContainer>
    <AsideNavContainer
      slot="aside"
      title="Narrow Your Search"
      colorVariant="secondary"
    >
      {
        props.applicableCategories?.length > 0 && (
          <AsideNav
            title={`${resourceTypeLabel} by category...`}
            links={props.applicableCategories.map((category) => ({
              to: `/${params.resourceType}/${category.slug}`,
              label: category.title,
            }))}
            colorVariant={"secondary"}
          />
        )
      }
      {
        props.applicablePopulations?.length > 0 && (
          <AsideNav
            title={`${resourceTypeLabel} for...`}
            links={props.applicablePopulations.map((population) => ({
              to: `/${params.resourceType}/${population.slug}`,
              label: population.name,
            }))}
            colorVariant={"secondary"}
          />
        )
      }
    </AsideNavContainer>
  </ResourcePageLayout>
</MainLayout>
