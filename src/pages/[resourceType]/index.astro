---
import type { InternetResourcePageListing } from "@model/internetResource";
import type { Category } from "@model/category";
import type { Population } from "@model/population";

import {
  getCategoriesByFilter,
  getPopulations,
  getResourceTypePagesData,
} from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageListing from "@ui/ResourcePageListing.astro";

interface Props {
  resources: Array<InternetResourcePageListing>;
  applicablePopulations: Array<Population>;
  applicableCategories: Array<Category>;
}

export async function getStaticPaths() {
  const resourceTypePagesData = await getResourceTypePagesData();
  const populations = await getPopulations();

  const pathPromises = Object.entries(resourceTypePagesData).map(
    async ([resourceType, resources]: [
      string,
      Array<InternetResourcePageListing>,
    ]) => {
      const filteredPopulations = populations.filter((p) =>
        resources.some((r) => r.populations?.includes(p.slug)),
      );

      // This is less than ideal as means an additional request for each type
      const slugsWithTitles = await getCategoriesByFilter({ resourceType });

      return {
        params: { resourceType },
        props: {
          resources,
          applicablePopulations: filteredPopulations ?? [],
          applicableCategories: slugsWithTitles ?? [],
        },
      };
    },
  );

  const paths = await Promise.all(pathPromises);

  return paths.filter((x) => x.props.resources.length > 0);
}

const params = Astro.params;
const props = Astro.props;
---

<MainLayout>
  <section>
    <ul>
      {
        props.resources.map((resource) => (
          <li class="mb-6">
            <ResourcePageListing resource={resource} />
          </li>
        ))
      }
    </ul>
  </section>
  <aside>
    {
      props.applicablePopulations?.length > 0 && (
        <nav>
          <h2>Population</h2>
          <ul>
            {props.applicablePopulations.map((population) => (
              <li>
                <a href={`/${params.resourceType}/${population.slug}`}>
                  {population.name}
                </a>
              </li>
            ))}
          </ul>
        </nav>
      )
    }
    {
      props.applicableCategories?.length > 0 && (
        <nav>
          <h2>Category</h2>
          <ul>
            {props.applicableCategories.map((category) => (
              <li>
                <a href={`/${params.resourceType}/${category.slug}`}>
                  {category.title}
                </a>
              </li>
            ))}
          </ul>
        </nav>
      )
    }
  </aside>
</MainLayout>
