---
import capitalize from "lodash/capitalize";
import intersectionBy from "lodash/intersectionBy";
import pluralize from "pluralize";

import { INTERNET_RESOURCE_TYPES } from "@model/common";

import {
  getCategoriesForPopulation,
  getCategoriesForResourceType,
  getInternetResources,
  getPopulation,
  getPopulationSlugs,
} from "@common/client";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";
import TwoColLayout from "@layouts/TwoColLayout.astro";

import AsideNav from "@ui/AsideNav/AsideNav.astro";
import Resource from "@ui/Resource.astro";
import NavLink from "@ui/primitives/NavLink.astro";

export async function getStaticPaths() {
  const slugs = await getPopulationSlugs();

  return [
    ...INTERNET_RESOURCE_TYPES.flatMap((resourceType) =>
      slugs.map((population) => ({
        params: { resourceType, population },
      })),
    ),
  ];
}

const params = Astro.params;

const resources = await getInternetResources({
  resourceType: params.resourceType,
  populationSlug: params.population,
});

// TODO - we're being lazy here, perhaps we need to refactor the queries...
const categoriesForPopulation = await getCategoriesForPopulation(
  params.population,
);
const categoriesForType = await getCategoriesForResourceType(
  params.resourceType,
);

const uniqueCategories = intersectionBy(
  categoriesForPopulation,
  categoriesForType,
  "slug",
);

const population = await getPopulation(params.population);

const resourceTypeLabel = capitalize(pluralize(params.resourceType));
---

<MainLayout>
  <ResourcePageLayout
    resourceType={params.resourceType}
    population={population}
  >
    <TwoColLayout>
      <ul>
        {
          resources?.map((resource) => (
            <li>
              <Resource resource={resource} />
            </li>
          ))
        }
      </ul>
      <aside slot="aside">
        {
          uniqueCategories.length > 0 && (
            <AsideNav
              title={`${resourceTypeLabel} for ${population.name} by category...`}
            >
              {uniqueCategories.map((category) => (
                <NavLink
                  href={`/${params.resourceType}/${category.slug}/${population.slug}`}
                  navContext="secondary"
                >
                  {category.title}
                </NavLink>
              ))}
            </AsideNav>
          )
        }
      </aside>
    </TwoColLayout>
  </ResourcePageLayout>
</MainLayout>
