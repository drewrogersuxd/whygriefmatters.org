---
import uniqBy from "lodash/uniqBy";

import type { Category } from "@model/category";
import type {
  InternetResourcePageListing,
  InternetResourceType,
} from "@model/internetResource";

import { getPopulationPagesData } from "@common/client";
import { getHumanReadableStringFromValue } from "@common/string";
import { getFullCategoryName } from "@common/category";

import MainLayout from "@layouts/MainLayout.astro";
import ResourcePageLayout from "@layouts/ResourcePageLayout.astro";

import AsideNav from "@ui/AsideNav/AsideNav.astro";
import AsideNavContainer from "@ui/AsideNav/AsideNavContainer.astro";
import ResourcePageListing from "@ui/ResourcePageListing/ResourcePageListing.astro";
import ResourcePageListingsContainer from "@ui/ResourcePageListing/ResourcePageListingsContainer.astro";
import ResourcePageListingsListItem from "@ui/ResourcePageListing/ResourcePageListingsListItem.astro";

interface Props {
  populationName: string;
  resources: Array<InternetResourcePageListing>;
  applicableCategories: Array<Category>;
}

// getStaticPaths was broken so this is a pretty quick implementation
// ...could probs be optimised if builds slow down significantly when building these pages
export async function getStaticPaths() {
  const populationPagesData = await getPopulationPagesData();

  return populationPagesData.flatMap((pageData) => {
    // Array typed as any as 'categories' missing from type :(
    const resourcesByType: Record<InternetResourceType, Array<any>> = {
      app: [],
      article: [],
      blog: [],
      book: [],
      booklet: [],
      brochure: [],
      course: [],
      forum: [],
      memorial: [],
      peerSupport: [],
      podcast: [],
      podcastEpisode: [],
      story: [],
      supportGroup: [],
      therapyResource: [],
      video: [],
      webinar: [],
      website: [],
    };

    pageData.resources?.forEach((resource) => {
      resourcesByType[resource.type].push(resource);
    });

    const entries = Object.entries(resourcesByType).filter(
      ([_, resources]) => resources.length > 0
    );

    return entries.flatMap(([type, resources]) => {
      const applicableCategories = uniqBy(
        resources
          .filter((r) => r.categories !== null)
          .flatMap((r) => r.categories),
        "slug"
      );

      return {
        params: { resourceType: type, population: pageData.slug },
        props: {
          populationName: pageData.name,
          resources: resources,
          applicableCategories,
        },
      };
    });
  });
}

const params = Astro.params;
const props = Astro.props;
---

<MainLayout>
  <ResourcePageLayout>
    <ResourcePageListingsContainer slot="section">
      {
        props.resources.map((resource) => (
          <ResourcePageListingsListItem>
            <ResourcePageListing resource={resource} />
          </ResourcePageListingsListItem>
        ))
      }
    </ResourcePageListingsContainer>
    <Fragment slot="aside">
      {
        props.applicableCategories.length > 0 && (
          <AsideNavContainer
            title="Narrow Your Search"
            subtitle={`See ${getHumanReadableStringFromValue(
              params.resourceType,
              true
            )} for ${props.populationName} by category...`}
            colorVariant="secondary"
          >
            <AsideNav
              links={props.applicableCategories.map((category) => ({
                to: `/${params.resourceType}/${category.slug}/${params.population}`,
                label: `${getFullCategoryName(
                  category.parent?.slug ?? "",
                  category.title
                )}`,
              }))}
              colorVariant="secondary"
            />
          </AsideNavContainer>
        )
      }
      <AsideNavContainer
        title="Related Resources"
        subtitle="Didn't find what you were looking for?"
      >
        <AsideNav
          links={[
            {
              to: `/${params.population}`,
              label: `See all resources for ${props.populationName}`,
            },
            {
              to: `/${params.resourceType}`,
              label: `See all ${getHumanReadableStringFromValue(
                params.resourceType,
                true
              )}`,
            },
          ]}
        />
      </AsideNavContainer>
    </Fragment>
  </ResourcePageLayout>
</MainLayout>
