---
import { toHTML } from "@portabletext/to-html";
import { getHomePage, getImageUrl } from "@common/client";
import type { ResourcePageLink } from "@model/common";
import MainLayout from "@layouts/MainLayout.astro";
import RichTextContentBlock from "@ui/richTextContentBlock.astro";

const homePage = await getHomePage();

const heroImg = {
  url: getImageUrl(homePage.heroImage.image).url(),
  alt: homePage.heroImage.altText,
};

const bgVar = `url(${heroImg.url})`;

function getRoute(pageLink: ResourcePageLink): string {
  const slugParts = [pageLink.type, pageLink.category, pageLink.population]
    .filter((part) => Boolean(part))
    .join("/");

  return `/${slugParts}`;
}
---

<MainLayout>
  <section
    class="relative hero-bg bg-center bg-cover flex items-center text-white"
  >
    <div class="p-4">
      <h1 class="text-2xl">{homePage?.org.name}</h1>
      <span>{homePage?.org.slogan}</span>
    </div>
  </section>
  <section>
    <div class="bg-blue-800 p-2">
      <h2
        class="text-3xl text-center font-serif lowercase ellipsis text-white font-light"
      >
        Our <span class="font-semibold">Mission</span>
      </h2>
    </div>
    <p class="max-w-prose my-6 m-auto">{homePage?.org.mission}</p>
  </section>

  <div class="bg-blue-800 p-2">
    <h2
      class="text-3xl text-center font-serif lowercase ellipsis text-white font-light"
    >
      Our <span class="font-semibold">Values</span>
    </h2>
  </div>

  <div class="flex text-white">
    {
      homePage.org.coreValues.map((coreValue, i) => (
        <div class={i % 2 === 0 ? "bg-blue-600" : "bg-blue-700"}>
          <div class="p-3">
            <h3 class="font-bold">{coreValue.title}</h3>
            <p>{coreValue.description}</p>
          </div>
        </div>
      ))
    }
  </div>

  {
    homePage?.featurePanels.map((featuredContent) => (
      <>
        <div class="bg-blue-800 p-2">
          <h2 class="text-3xl text-bold text-center font-serif lowercase ellipsis text-white font-light">
            {featuredContent.title}
          </h2>
        </div>
        {featuredContent.description && (
          <Fragment set:html={toHTML(featuredContent.description)} />
        )}
        {featuredContent.content.map((content) => {
          switch (content.contentType) {
            case "richTextContentBlock":
              return (
                <RichTextContentBlock portableText={content.portableText} />
              );
            case "resourceLinks":
              return (
                <div>
                  {content.resources.map((link) => (
                    <a
                      class="bg-red-200 m-3"
                      href={link.url}
                      target="_blank"
                      rel="noopener"
                    >
                      {link.title}
                    </a>
                  ))}
                </div>
              );
            case "rowOfThree":
              return (
                <div class="flex w-screen">
                  {content.images.map((image) => (
                    <div class="flex-1 m-3">
                      <img
                        src={getImageUrl(image.image).url()}
                        alt={image.altText}
                      />
                    </div>
                  ))}
                </div>
              );
            case "resourcePageLinks":
              return (
                <div>
                  {content.links.map((pageLink) => (
                    <a class="bg-green-200 m-3" href={getRoute(pageLink)}>
                      {pageLink.label}
                    </a>
                  ))}
                </div>
              );
          }
        })}
        {featuredContent.featuredContentFooterLink && (
          <a
            class="bg-yellow-200 m-3"
            href={getRoute(featuredContent.featuredContentFooterLink)}
          >
            {featuredContent.featuredContentFooterLink.label}
          </a>
        )}
      </>
    ))
  }
</MainLayout>

<style define:vars={{ bgVar }}>
  .hero-bg {
    background-image: var(--bgVar);
    height: 50vh;
  }

  .ellipsis::after {
    content: "...";
  }
</style>
